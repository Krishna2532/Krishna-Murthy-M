def record_attendance():
    path = 'ImagesAttendance'
    images = []
    classNames = []
    myList = os.listdir(path)
    for cl in myList:
        curImg = cv2.imread(f'{path}/{cl}')
        images.append(curImg)
        classNames.append(os.path.splitext(cl)[0])
    return images, classNames

def findEncodings(images):
    encodeList = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encode = face_recognition.face_encodings(img)[0]
        encodeList.append(encode)
    return encodeList

def markAttendance(name):
    with open('Attendance.csv', 'r+') as f:
        myDataList = f.readlines()
        nameList = []
        for line in myDataList:
            entry = line.split(',')
            nameList.append(entry[0])
        if name not in nameList:
            now = datetime.now()
            dtString = now.strftime('%d/%m/%Y %H:%M:%S')
            f.writelines(f'\n{name},{dtString}')

images, classNames = record_attendance()
encodingsKnown = findEncodings(images)
print('Encoding Complete')

cap = cv2.VideoCapture(0)
while True:
    success, img = cap.read()
    imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
    imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

    facesCurFrame = face_recognition.face_locations(imgS)
    encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)

    for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
        matches = face_recognition.compare_faces(encodingsKnown, encodeFace)
        faceDis = face_recognition.face_distance(encodingsKnown, encodeFace)
        matchIndex = np.argmin(faceDis)

        if matches[matchIndex]:
            name = classNames[matchIndex].upper()
            y1, x2, y2, x1 = faceLoc
            y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
            cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
            markAttendance(name)

            frequency = 2500  # Set Frequency to 2500 Hertz
            duration = 1000   # Set Duration to 1000 ms == 1 second
            winsound.Beep(frequency, duration)

    cv2.imshow('ATTENDANCE LOADER', img)
    if cv2.waitKey(20) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
def view_attendance():
    try:
        if os.path.exists('Attendance.csv'):
            os.startfile('Attendance.csv')
        else:
            raise ValueError("Attendance file does not exist.")
    except Exception as e:
        messagebox.showerror("Error", str(e))
# GUI elements
title_image = tk.PhotoImage(file='logo.png')
title_label = tk.Label(root, image=title_image)
record_button = tk.Button(root, text="Record Attendance", width=20, height=2,
                          bg='#4CAF50', fg='White', font=('Helvetica', 12), command=record_attendance)
view_button = tk.Button(root, text="View Attendance", width=20, height=2,
                        bg='#008CBA', fg='White', font=('Helvetica', 12), command=view_attendance)

# Adding GUI elements to tkinter window
title_label.pack(side=tk.TOP, pady=20)
record_button.pack(pady=20)
view_button.pack(pady=20)

# Run GUI window
root.mainloop()
